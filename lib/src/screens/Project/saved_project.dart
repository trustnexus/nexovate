import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:nexovate/src/screens/utils/questionnaire_storage.dart';
import 'package:nexovate/src/screens/Project/project_detail_page.dart';
import 'package:flutter/services.dart';
import 'package:path_provider/path_provider.dart';
import 'package:pdf/pdf.dart';
import 'package:path/path.dart' as path;
import 'package:pdf/widgets.dart' as pw;
import 'dart:io';

class SavedProjectsScreen extends StatefulWidget {
  const SavedProjectsScreen({super.key});

  @override
  State<SavedProjectsScreen> createState() => _SavedProjectsScreenState();
}

class _SavedProjectsScreenState extends State<SavedProjectsScreen> {

Future<void> _deleteProject(String id) async {
  final updated = _projects.where((p) => p.id != id).toList();
  await saveAllProjects(updated);
  await _loadProjects(); // ‚úÖ Refresh the UI
  if (mounted) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text("üóëÔ∏è Project deleted")),
    );
  }
}


List<SavedProject> _projects = [];
bool _isLoading = true;

@override
void initState() {
  super.initState();
  _loadProjects();
}

Future<void> _loadProjects() async {
  _projects = await loadSavedProjects();
  setState(() {
    _isLoading = false;
  });
}


Future<void> generatePdfFromProject(SavedProject project, BuildContext context) async {
  try {
    final pdf = pw.Document();
    final fontReg = pw.Font.ttf(await rootBundle.load('assets/fonts/Poppins-Regular.ttf'));
    final fontBold = pw.Font.ttf(await rootBundle.load('assets/fonts/Poppins-Bold.ttf'));
    final bullet = pw.MemoryImage((await rootBundle.load('assets/images/bullet.png')).buffer.asUint8List());
    final logo = pw.MemoryImage((await rootBundle.load('assets/images/N_log.png')).buffer.asUint8List());

    pw.Widget buildTechRow(String title, String value, PdfColor color, pw.Font fontBold, pw.Font fontReg) {
  return pw.Padding(
    padding: const pw.EdgeInsets.symmetric(vertical: 4),
    child: pw.Row(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        pw.Container(
          width: 90,
          child: pw.Text(
            "$title:",
            style: pw.TextStyle(fontWeight: pw.FontWeight.bold, fontSize: 12, font: fontBold, color: color),
          ),
        ),
        pw.Expanded(
          child: pw.Text(value, style: pw.TextStyle(fontSize: 12, font: fontReg)),
        ),
      ],
    ),
  );
}

// Tech Row Widget
pw.Widget _buildTechRow(String title, String value, PdfColor color) {
  return pw.Padding(
    padding: const pw.EdgeInsets.only(bottom: 6),
    child: pw.Row(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        pw.Container(width: 90, child: pw.Text("$title:", style: pw.TextStyle(fontWeight: pw.FontWeight.bold, color: color))),
        pw.Expanded(child: pw.Text(value, style: pw.TextStyle(fontSize: 12))),
      ],
    ),
  );
}


// üîñ Cover Page
pdf.addPage(
  pw.Page(
    build: (_) => pw.Container(
      color: PdfColors.grey300,
      child: pw.Center(
        child: pw.Column(
          mainAxisAlignment: pw.MainAxisAlignment.center,
          children: [
            pw.Image(logo, width: 80),
            pw.SizedBox(height: 20),
            pw.Text("Nexovate", style: pw.TextStyle(font: fontBold, fontSize: 26, color: PdfColors.deepOrange)),
            pw.SizedBox(height: 8),
            pw.Text("Project Scope Document", style: pw.TextStyle(font: fontReg, fontSize: 18)),
            pw.SizedBox(height: 40),
            pw.Text("Project: ${project.selectedAnswers[0]}", style: pw.TextStyle(font: fontBold, fontSize: 16)),
            pw.SizedBox(height: 8),
            pw.Text("Generated by Nexovate", style: pw.TextStyle(fontSize: 12, font: fontReg, color: PdfColors.grey700)),
          ],
        ),
      ),
    ),
  ),
);

// üîÑ Main Content Page
pdf.addPage(
  pw.MultiPage(
    pageFormat: PdfPageFormat.a4,
    margin: const pw.EdgeInsets.all(32),
    
    // ‚úÖ Add a Header
    header: (context) => pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        pw.Row(
          mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
          children: [
            pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                pw.Text("Nexovate", style: pw.TextStyle(font: fontBold, fontSize: 18, color: PdfColors.deepOrange)),
                pw.Text("Project Scope Document", style: pw.TextStyle(font: fontReg, fontSize: 12)),
              ],
            ),
            pw.Image(logo, width: 40),
          ],
        ),
        pw.Divider(thickness: 0.8),
        pw.SizedBox(height: 10),
      ],
    ),

    // ‚úÖ Footer with Page Number
    footer: (context) => pw.Align(
      alignment: pw.Alignment.centerRight,
      child: pw.Text("Page ${context.pageNumber}",
        style: pw.TextStyle(fontSize: 10, font: fontReg, color: PdfColors.grey600)),
    ),

    // ‚úÖ Main Content
    build: (context) => [
      pw.Text("Project Summary", style: pw.TextStyle(font: fontBold, fontSize: 18)),
      pw.SizedBox(height: 16),

      ...List.generate(project.questions.length, (i) {
        return pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            pw.Text(project.questions[i], style: pw.TextStyle(font: fontBold, fontSize: 12)),
            pw.SizedBox(height: 4),
            pw.Row(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                pw.Container(
                  margin: const pw.EdgeInsets.only(top: 2),
                  child: pw.Image(bullet, width: 5, height: 5),
                ),
                pw.SizedBox(width: 6),
                pw.Expanded(
                  child: pw.Text(
                    project.selectedAnswers[i],
                    style: pw.TextStyle(font: fontReg, fontSize: 12),
                  ),
                ),
              ],
            ),
            pw.SizedBox(height: 12),
          ],
        );
      }),

      pw.SizedBox(height: 24),
      pw.Text("Recommended Tech Stack",
          style: pw.TextStyle(font: fontBold, fontSize: 16, color: PdfColors.pink800)),
      pw.SizedBox(height: 12),
      _buildTechRow("Frontend", project.frontend, PdfColors.deepPurple),
      _buildTechRow("Backend", project.backend, PdfColors.teal),
      _buildTechRow("Database", project.database, PdfColors.indigo),

      pw.Spacer(),
      pw.Divider(thickness: 0.75),
      pw.Align(
        alignment: pw.Alignment.centerRight,
        child: pw.Text("Generated by Nexovate",
            style: pw.TextStyle(fontSize: 10, font: fontReg, color: PdfColors.grey600)),
      ),
    ],
  ),
);
    // Save to file
    // ‚úÖ Get Windows Downloads path safely
final downloadsDir = Directory("${Platform.environment['USERPROFILE']}\\Downloads");
final safeName = project.selectedAnswers[0].replaceAll(" ", "_").toLowerCase();
final filePath = path.join(downloadsDir.path, "${safeName}_scope.pdf");
final file = File(filePath);

await file.writeAsBytes(await pdf.save());
await Process.run('explorer', [file.path]);

    // Open the PDF
    if (Platform.isWindows) {
  await Process.run('cmd', ['/c', 'start', '', '"${file.path}"']);
    } else if (Platform.isMacOS) {
      await Process.run('open', [file.path]);
    } else if (Platform.isLinux) {
      await Process.run('xdg-open', [file.path]);
    }

    if (context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("‚úÖ PDF saved to: ${file.path}")));
    }
  } catch (e) {
    if (context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text("‚ùå Failed to generate PDF")));
    }
  }
}

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      body: SafeArea(
        child: Column(
          children: [
            _buildHeader(),
            Expanded(
  child: FutureBuilder<List<SavedProject>>(
    future: loadSavedProjects(), // ‚úÖ returns Future<List<SavedProject>>
    builder: (context, snapshot) {
      if (!snapshot.hasData) {
        return const Center(child: CircularProgressIndicator(color: Colors.pinkAccent));
      }

      final projects = snapshot.data!;
      if (projects.isEmpty) {
        return const Center(child: Text("No saved projects.", style: TextStyle(color: Colors.white70)));
      }

      return ListView.builder(
        padding: const EdgeInsets.all(16),
        itemCount: projects.length,
        itemBuilder: (context, index) {
          return _buildProjectCard(context, projects[index], index);
        },
      );
    },
  ),
),

          ],
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return Padding(
      padding: const EdgeInsets.all(16),
      child: Row(
        children: [
          const BackButton(color: Colors.pinkAccent),
          Expanded(
            child: ShaderMask(
              shaderCallback: (bounds) => const LinearGradient(
                colors: [Colors.orange, Colors.pinkAccent],
              ).createShader(bounds),
              child: const Text(
                "Saved Projects",
                textAlign: TextAlign.center,
                style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold, color: Colors.white, fontFamily: 'Poppins'),
              ),
            ),
          ),
          Image.asset('assets/images/N_log.png', height: 28),
        ],
      ),
    );
  }

  Widget _buildProjectCard(BuildContext context, SavedProject project, int index) {
  final timestamp = DateFormat('MMM d, yyyy ‚Äì h:mm a').format(project.timestamp);

  return TweenAnimationBuilder<double>(
    tween: Tween(begin: 0.0, end: 1.0),
    duration: Duration(milliseconds: 300 + index * 100),
    builder: (context, value, child) => Opacity(
      opacity: value,
      child: Transform.translate(offset: Offset(0, (1 - value) * 20), child: child),
    ),
    child: Container(
      margin: const EdgeInsets.symmetric(vertical: 10),
      height: 140, // ‚¨ÖÔ∏è Increased height
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(16),
        gradient: const LinearGradient(
          colors: [Color(0xFFFF9900), Color(0xFFFF3D5A)],
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.pinkAccent.withOpacity(0.5),
            blurRadius: 20,
            spreadRadius: 2,
            offset: const Offset(0, 4),
          )
        ],
      ),
      child: Container(
        margin: const EdgeInsets.all(1.8),
        decoration: BoxDecoration(
          color: Colors.black,
          borderRadius: BorderRadius.circular(14),
        ),
        child: ListTile(
          contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 18), // ‚¨ÖÔ∏è More vertical padding
          leading: Image.asset('assets/images/N_log.png', height: 48), // ‚¨ÖÔ∏è Slightly bigger icon
          title: Text(
            project.selectedAnswers[0],
            style: const TextStyle(
              color: Colors.white,
              fontWeight: FontWeight.bold,
              fontFamily: 'Poppins',
              fontSize: 16,
            ),
          ),
          subtitle: Padding(
            padding: const EdgeInsets.only(top: 6),
            child: Text(
              "Created: $timestamp",
              style: const TextStyle(
                color: Colors.white60,
                fontSize: 12,
                fontFamily: 'Poppins',
              ),
            ),
          ),
          trailing: Wrap(
            spacing: 4,
            children: [
              IconButton(
                icon: const Icon(Icons.picture_as_pdf, color: Colors.lightBlueAccent),
                tooltip: "Download PDF",
                onPressed: () => generatePdfFromProject(project, context),
              ),
              IconButton(
                icon: const Icon(Icons.delete, color: Colors.pinkAccent),
                tooltip: "Delete",
                onPressed: () async {
                  final confirm = await showDialog<bool>(
                    context: context,
                    builder: (ctx) => AlertDialog(
                      backgroundColor: Colors.grey[900],
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                      title: const Text("Delete Project", style: TextStyle(color: Colors.orange, fontWeight: FontWeight.bold)),
                      content: const Text("Are you sure you want to delete this project?", style: TextStyle(color: Colors.white70)),
                      actionsAlignment: MainAxisAlignment.spaceAround,
                      actions: [
                        AnimatedContainer(
                          duration: const Duration(milliseconds: 300),
                          decoration: BoxDecoration(
                            color: Colors.redAccent,
                            borderRadius: BorderRadius.circular(10),
                          ),
                          child: TextButton(
                            onPressed: () => Navigator.of(ctx).pop(false),
                            child: const Padding(
                              padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),
                              child: Text("No", style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),
                            ),
                          ),
                        ),
                        AnimatedContainer(
                          duration: const Duration(milliseconds: 300),
                          decoration: BoxDecoration(
                            color: Colors.amber[700],
                            borderRadius: BorderRadius.circular(10),
                          ),
                          child: TextButton(
                            onPressed: () => Navigator.of(ctx).pop(true),
                            child: const Padding(
                              padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),
                              child: Text("Yes", style: TextStyle(color: Colors.black, fontWeight: FontWeight.bold)),
                            ),
                          ),
                        ),
                      ],
                    ),
                  );

                  if (confirm == true) {
                    await _deleteProject(project.id);
                  }
                },
              ),
            ],
          ),
          onTap: () {
            Navigator.push(
              context,
              MaterialPageRoute(builder: (_) => ProjectDetailPage(project: project)),
            );
          },
        ),
      ),
    ),
  );
}

}
